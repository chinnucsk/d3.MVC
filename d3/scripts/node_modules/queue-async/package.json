{
  "name": "queue-async",
  "version": "1.0.3",
  "description": "A little helper for asynchronous JavaScript.",
  "keywords": [
    "asynchronous",
    "async",
    "queue"
  ],
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mbostock/queue.git"
  },
  "main": "queue.js",
  "devDependencies": {
    "uglify-js": "~2.2.5",
    "vows": "~0.7.0"
  },
  "scripts": {
    "test": "node_modules/.bin/vows"
  },
  "readme": "# queue.js\n\n**Queue.js** is yet another asynchronous helper library for JavaScript. Think of it as a minimalist version of [Async.js](https://github.com/caolan/async) that allows fine-tuning over parallelism. Or, think of it as a version of [TameJs](http://tamejs.org/) that does not use code generation.\n\nFor example, if you wanted to stat two files in parallel:\n\n```js\nqueue()\n    .defer(fs.stat, __dirname + \"/../Makefile\")\n    .defer(fs.stat, __dirname + \"/../package.json\")\n    .await(function(error, file1, file2) { console.log(file1, file2); });\n```\n\nOr, if you wanted to run a bazillion asynchronous tasks (here represented as an array of closures) serially:\n\n```js\nvar q = queue(1);\ntasks.forEach(function(t) { q.defer(t); });\nq.awaitAll(function(error, results) { console.log(\"all done!\"); });\n```\n\nQueue.js can be run inside Node.js or in a browser.\n\n## API Reference\n\n### queue([parallelism])\n\nConstructs a new queue with the specified *parallelism*. If *parallelism* is not specified, the queue has infinite parallelism. Otherwise, *parallelism* is a positive integer. For example, if *parallelism* is 1, then all tasks will be run in series. If *parallelism* is 3, then at most three tasks will be allowed to proceed concurrently; this is useful, for example, when loading resources in a web browser.\n\n### queue.defer(method[, argumentsâ€¦])\n\nAdds the specified *method* to the queue, with any optional *arguments*. The *method* is called with the optional arguments and a final callback argument, which should be called when the task has finished.\n\n### queue.await(callback)\n### queue.awaitAll(callback)\n\nSets the *callback* to be notified when all deferred tasks have finished. If *await* is used, each result is passed as a separate argument; if *awaitAll* is used, the entire array of results is passed as a single argument.\n\n## Callbacks\n\nThe callbacks follow the Node.js convention where the first argument is an optional error object, and the second is used to pass on the result of an operation. Queue.js does not directly support asynchronous functions that return multiple results; however, you can homogenize such functions by wrapping them and converting multiple results into a single object or array.\n",
  "readmeFilename": "README.md",
  "_id": "queue-async@1.0.3",
  "_from": "queue-async"
}
